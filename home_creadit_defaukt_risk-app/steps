1.create a yaml file of deployment and svc and bring up
2.then install the ingress controller 
3. then create a ingress for app
4. define dns entry in the hosts file with on which hostname we want to access url and resolve ip take from app ingress assigned address , if resource delete and recrete have to reconfigured ip again in hosts file with correct 
5. issue:
redirect
localhost
curl 
http
then url not accessible -- change the hostname entry in ingress file and reconfigured and able to access.
6. svc is nodeport
7./*

apiVersion: v1
kind: Service
metadata:
  name: my-python-app-service
spec:
  selector:
    app: my-python-app
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80
  type: LoadBalancer
*/

starting svc is loadbalance and able to access application with deployment and svc kind by using localhost http://localhost:80


for node -- > we can try this once nodeport svc created -- > http://localhost:30080


8.port forwarding ---> kubectl port-forward service/my-python-app-service 8080:80

This will map port 80 of the service to port 8080 on your host machine. You can then access your application at: http://localhost:8080

9.after setup dns entry check ping , curl the hostnane like http://my-python-app.local  inside pod , check the logs of controller , deployment and check the curl command output properly to have all status good.



10. ingress error -- ingress="default/my-python-app-ingress" error="ingress does not contain a valid IngressClass" --- resolve --> define ingress class and also check rewrite.
11. temporary pod --> kubectl run test-pod --rm -it --image=alpine -- sh
# Inside the pod:
apk add curl
curl http://my-python-app-service:80



12. we can put ingress in debug   
